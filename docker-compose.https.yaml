version: "3"

x-logging:
  &default-logging
  options:
    max-size: '1G'
    max-file: '5'
  driver: json-file

x-vc-worker-environment:
  &default-vc-worker-environment
  - UspLicenseKey
  - S3_ACCESS_KEY
  - S3_SECRET_KEY
  - S3_REGION
  - LOG_LEVEL=DEBUG

x-vc-worker-image: &default-vc-worker-image DOCKER_HUB_VIRTUAL_CHANNEL_APP

x-vc-volumes:
  &default-volumes
  - type: bind
    source: ./channels
    target: /channels

services:

  # unified origin
  origin:
    image: DOCKER_HUB_VIRTUAL_CHANNEL_ORIGIN
    restart: always
    logging: *default-logging
    environment:
      - UspLicenseKey
      - REST_API_PORT=81
      - REMOTE_STORAGE_URL
      - S3_ACCESS_KEY
      - S3_SECRET_KEY
      - S3_REGION
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.origin.entrypoints=websecure"
      - "traefik.http.routers.origin.rule=PathPrefix(`/`)"
      - "traefik.http.routers.origin.tls=true"
    volumes:
      - type: bind
        source: ./channels
        target: /var/www/unified-origin/

  # Virtual Channel application
  virtual-channel-api:
    image: DOCKER_HUB_VIRTUAL_CHANNEL_APP
    restart: always
    logging: *default-logging
    environment:
      - UspLicenseKey
      - LOG_LEVEL=INFO
      - API_KEY=${API_KEY}
      - API_INSECURE=${API_INSECURE:-True}
    env_file:
      - rabbitmq-credentials.env
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.entrypoints=apisecure"
      - "traefik.http.routers.api.rule=PathPrefix(`/`)"
      - "traefik.http.routers.api.tls=true"
      - "traefik.http.services.api.loadbalancer.server.port=8000"
    volumes: *default-volumes
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --proxy-headers --forwarded-allow-ips *

  # Manifest Proxy application
  manifest-proxy:
    image: DOCKER_HUB_VIRTUAL_CHANNEL_MANIFEST_PROXY
    restart: always
    logging: *default-logging
    environment:
      - UspLicenseKey
      - LOG_LEVEL=INFO
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.manifest-proxy.rule=Path(`/{manifest:.*\\.ism[l]?/.*\\.(mpd|m3u8)}`)"
      - "traefik.http.routers.manifest-proxy.entrypoints=websecure"
      - "traefik.http.routers.manifest-proxy.tls=true"
    volumes: *default-volumes
    command: uvicorn app.main:app --host 0.0.0.0 --port 80 --proxy-headers --forwarded-allow-ips *

  virtual-channel-worker-vod2live:
    image: *default-vc-worker-image
    restart: always
    logging: *default-logging
    environment: *default-vc-worker-environment
    env_file:
      - rabbitmq-credentials.env
    volumes: *default-volumes
    command: /bin/sh -c "celery -A app.tasks.vod2live worker -Q vod2live --loglevel $${LOG_LEVEL}"

  virtual-channel-worker-transition:
    image: *default-vc-worker-image
    restart: always
    logging: *default-logging
    environment: *default-vc-worker-environment
    env_file:
      - rabbitmq-credentials.env
    volumes: *default-volumes

    command: /bin/sh -c "celery -A app.tasks.trigger_transition worker -Q trigger_transition --loglevel $${LOG_LEVEL}"

  # redis and rabbitmq for task queue and results storage
  redis:
    image: redis:7.0.4
    restart: always
    entrypoint: redis-server --appendonly yes
    logging: *default-logging
    volumes:
      - redis_data:/data

  rabbitmq:
    logging: *default-logging
    hostname: vc-rabbit
    image: rabbitmq:3.11.0-alpine
    restart: always
    # Set consumer_timeout to allow Celery jobs with long ETA, see
    # https://docs.celeryq.dev/en/stable/userguide/calling.html#eta-and-countdown
    environment:
      - RABBITMQ_SERVER_ADDITIONAL_ERL_ARGS=-rabbit consumer_timeout 31622400000
    env_file:
      - rabbitmq-credentials.env
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  traefik:
    image: traefik:v2.7
    restart: always
    logging: *default-logging
    ports:
      - 80:80
      - 443:443
      - 8000:8000
      - 8433:8443
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ./traefik.https.yaml:/etc/traefik/traefik.yaml
      - type: bind
        source: ./certs
        target: /certs


volumes:
  rabbitmq_data:
    driver: local
  redis_data:
    driver: local
    